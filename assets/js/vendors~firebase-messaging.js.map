{"version":3,"sources":["webpack:///../src/util/errors.ts","webpack:///../src/util/constants.ts","webpack:///../src/api/common.ts","webpack:///../src/api/create-installation-request.ts","webpack:///../src/util/sleep.ts","webpack:///../src/helpers/generate-fid.ts","webpack:///../src/helpers/buffer-to-base64-url-safe.ts","webpack:///../src/util/get-key.ts","webpack:///../src/helpers/fid-changed.ts","webpack:///../src/helpers/idb-manager.ts","webpack:///../src/index.ts","webpack:///../src/helpers/get-installation-entry.ts","webpack:///../src/api/generate-auth-token-request.ts","webpack:///../src/helpers/refresh-auth-token.ts","webpack:///../src/functions/get-token.ts","webpack:///../src/api/delete-installation-request.ts","webpack:///../src/functions/on-id-change.ts","webpack:///../src/helpers/extract-app-config.ts","webpack:///../src/functions/get-id.ts","webpack:///../src/functions/delete-installation.ts","webpack:///../src/helpers/array-to-base64.ts","webpack:///../src/helpers/migrate-old-database.ts","webpack:///../src/core/api.ts","webpack:///../src/core/token-management.ts","webpack:///../src/interfaces/internal-message.ts","webpack:///../src/helpers/is-console-message.ts","webpack:///../src/controllers/window-controller.ts","webpack:///../src/controllers/sw-controller.ts","webpack:///../src/helpers/sleep.ts","webpack:///./node_modules/idb/build/idb.js"],"names":["getInstallationsEndpoint","INSTALLATIONS_API_URL","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","replace","creationTime","Date","now","getErrorFromResponse","requestName","json","responseJson","errorData","error","ERROR_FACTORY","create","serverCode","code","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","INTERNAL_AUTH_VERSION","getAuthorizationHeader","retryIfServerError","fn","result","createInstallationRequest","fid","endpoint","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","VALID_FID_PATTERN","generateFid","fidByteArray","Uint8Array","self","crypto","msCrypto","getRandomValues","array","btoa","String","fromCharCode","substr","encode","test","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","channel","getBroadcastChannel","postMessage","closeBroadcastChannel","broadcastFidChange","callbacks","get","callback","broadcastChannel","BroadcastChannel","onmessage","e","data","size","close","OBJECT_STORE_NAME","dbPromise","getDbPromise","oldVersion","createObjectStore","getInstallationEntry","update","oldEntry","installationEntry","clearTimedOutRequest","updateOrCreateInstallationEntry","entryWithPromise","navigator","onLine","registrationPromiseWithError","reject","registrationPromise","inProgressEntry","registrationTime","registeredInstallationEntry","set","isServerError","remove","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","updateInstallationRequest","entry","generateAuthTokenRequest","platformLoggerProvider","getGenerateAuthTokenEndpoint","platformLogger","getImmediate","optional","getPlatformInfoString","installation","refreshAuthToken","dependencies","forceRefresh","isEntryRegistered","oldAuthToken","isAuthTokenExpired","isAuthTokenValid","tokenPromise","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","undefined","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","onIdChange","callbackSet","Set","add","addCallback","delete","removeCallback","app","options","getMissingValueError","name","catch","console","ERROR_MAP","valueName","arrayToBase64","uint8Array","migrateOldDatabase","senderId","indexedDB","databases","map","db","includes","tokenDetails","objectStoreNames","contains","objectStore","transaction","index","value","clear","oldDetails","auth","p256dh","fcmToken","createTime","subscriptionOptions","swScope","vapidKey","checkTokenDetails","length","upgradeDb","dbGet","firebaseDependencies","oldTokenDetails","dbSet","tx","put","complete","dbRemove","DEFAULT_VAPID_KEY","requestGetToken","getBody","subscribeOptions","getEndpoint","responseData","errorInfo","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","ENDPOINT","installations","getToken","web","applicationPubKey","MessageType","swRegistration","Notification","permission","getPushSubscription","pushSubscription","scope","getNewToken","dbOptions","isVapidKeyEqual","currentOptions","isEndpointEqual","isAuthEqual","isP256dhEqual","warn","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","subscription","subscribe","userVisibleOnly","applicationServerKey","isConsoleMessage","onMessageCallback","serviceWorker","addEventListener","messageEventListener","this","getServiceWorkerRegistration","requestPermission","permissionResult","usePublicVapidKey","useServiceWorker","ServiceWorkerRegistration","onMessage","nextOrObserver","next","setBackgroundMessageHandler","onTokenRefresh","register","browserErrorMessage","event","firebaseMessaging","type","payload","PUSH_RECEIVED","logEvent","messageType","eventType","NOTIFICATION_CLICKED","Error","getEventType","analyticsProvider","message_id","message_name","message_time","message_device_time","Math","floor","bgMessageHandler","waitUntil","onPush","onSubChange","onNotificationClick","registration","err","getMessagePayload","getClientList","clientList","some","client","visibilityState","url","startsWith","hasVisibleClients","sendMessageToWindowClients","notificationDetails","notification","notificationInformation","getNotificationData","showNotification","action","stopImmediatePropagation","link","fcmOptions","click_action","location","origin","getLink","getWindowClient","clients","openWindow","focus","createNewMessage","parsedURL","URL","href","matchAll","includeUncontrolled","details","title","actions","maxActions","NAMESPACE_EXPORTS","isSupported","prototype","hasOwnProperty","PushSubscription","window","cookieEnabled","INTERNAL","registerComponent","container","getProvider","keyName","messagingSenderId","setServiceProps","exports","toArray","arr","Array","slice","call","promisifyRequest","onsuccess","onerror","promisifyRequestCall","obj","args","p","apply","then","promisifyCursorRequestCall","Cursor","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","nativeObject","getAll","query","count","instance","items","iterateCursor","push","continue","openDb","version","upgradeCallback","onupgradeneeded","deleteDb","factory"],"mappings":";uJA6BM,IAAqB,MACzB,6BACE,kDACF,oBAA4B,2CAC5B,4BAAoC,mCACpC,oBACE,6FACF,iBAAyB,kDACzB,iCACE,2E,GAYS,EAAgB,IAAI,eCrBV,gBACK,gBDuB1B,GAYF,SAAgB,EAAc,GAC5B,OACE,aAAiB,iBACjB,EAAM,KAAK,SAAQ,kB,SErCPA,EAAyB,GACvC,MAAUC,4DAD+B,EAAAC,UACY,iBAGvD,SAAgBC,EACdC,GAEA,MAAO,CACLC,MAAOD,EAASC,MAChBC,cAAe,EACfC,WA8DuCC,EA9DMJ,EAASG,UAgEjDE,OAAOD,EAAkBE,QAAQ,IAAK,SA/D3CC,aAAcC,KAAKC,OA6DvB,IAA2CL,EAzD3C,SAAsBM,EACpBC,EACAX,G,wIAEoC,SAAMA,EAASY,Q,OAEnD,OAFMC,EAA8B,SAC9BC,EAAYD,EAAaE,MACxB,CAAP,EAAOC,EAAcC,OAAO,iBAA0B,CACpDN,YAAW,EACXO,WAAYJ,EAAUK,KACtBC,cAAeN,EAAUO,QACzBC,aAAcR,EAAUS,iBAI5B,SAAgBC,EAAW,G,IAAEC,EAAA,EAAAA,OAC3B,OAAO,IAAIC,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,mBACR,iBAAkBF,IAItB,SAAgBG,EACdC,EACA,G,IAAEC,EAAA,EAAAA,aAEIC,EAAUP,EAAWK,GAE3B,OADAE,EAAQC,OAAO,gBAmCjB,SAAgCF,GAC9B,MAAUG,UAAyBH,EApCHI,CAAuBJ,IAChDC,EAgBT,SAAsBI,EACpBC,G,sIAEe,SAAMA,K,OAErB,OAFMC,EAAS,UAEJd,QAAU,KAAOc,EAAOd,OAAS,IAEnC,CAAP,EAAOa,KAGF,CAAP,EAAOC,U,SCnEaC,EACpBT,EACA,G,IAAEU,EAAA,EAAAA,I,gJAkBe,OAhBXC,EAAW5C,EAAyBiC,GAEpCE,EAAUP,EAAWK,GACrBY,EAAO,CACXF,IAAG,EACHG,YFpBiC,SEqBjCC,MAAOd,EAAUc,MACjBC,WFvB2B,WE0BvBC,EAAuB,CAC3BC,OAAQ,OACRf,QAAO,EACPU,KAAMM,KAAKC,UAAUP,IAGN,GAAMN,GAAmB,WAAM,OAAAc,MAAMT,EAAUK,O,cAA1D7C,EAAW,UACJkD,GACuC,GAAMlD,EAASY,QAD/D,M,OAQF,OAPMuC,EAA4C,SAO3C,CAAP,EANiE,CAC/DZ,IAAKY,EAAcZ,KAAOA,EAC1Ba,mBAAoB,EACpBtB,aAAcqB,EAAcrB,aAC5BuB,UAAWtD,EAAiCoD,EAAcE,a,OAItD,SAAM3C,EAAqB,sBAAuBV,I,OAAxD,MAAM,gBC9CV,SAAgBsD,EAAMC,GACpB,OAAO,IAAIC,SAAc,SAAAC,GACvBC,WAAWD,EAASF,MCDjB,IAAMI,EAAoB,oBAOjC,SAAgBC,IACd,IAGE,IAAMC,EAAe,IAAIC,WAAW,KAElCC,KAAKC,QAAYD,KAA0CE,UACtDC,gBAAgBL,GAGvBA,EAAa,GAAK,IAAcA,EAAa,GAAK,GAElD,IAAMtB,EAUV,SAAgBsB,GAKd,OCpCoCM,EDgCIN,EC/B5BO,KAAKC,OAAOC,aAAY,MAAnBD,OAAM,mBAAiBF,KAC7B7D,QAAQ,MAAO,KAAKA,QAAQ,MAAO,MDkC7BiE,OAAO,EAAG,I,ICpCSJ,EDqBtBK,CAAOX,GAEnB,OAAOF,EAAkBc,KAAKlC,GAAOA,EApBd,GAqBvB,SAEA,MAvBuB,IEA3B,SAAgBmC,EAAO7C,GACrB,OAAUA,EAAU8C,QAAO,IAAI9C,EAAUc,MCA3C,IAAMiC,EAA2D,IAAIC,IAMrE,SAAgBC,EAAWjD,EAAsBU,GAC/C,IAAMwC,EAAML,EAAO7C,GAEnBmD,EAAuBD,EAAKxC,GAsD9B,SAA4BwC,EAAaxC,GACvC,IAAM0C,EAAUC,IACZD,GACFA,EAAQE,YAAY,CAAEJ,IAAG,EAAExC,IAAG,IAEhC6C,IA1DAC,CAAmBN,EAAKxC,GA0C1B,SAASyC,EAAuBD,EAAaxC,G,QACrC+C,EAAYV,EAAmBW,IAAIR,GACzC,GAAKO,E,IAIL,IAAuB,yBAAAA,GAAS,8BAAE,EAChCE,EADiB,SACRjD,I,kGAYb,IAAIkD,EAA4C,KAEhD,SAASP,IAOP,OANKO,GAAoB,qBAAsB1B,QAC7C0B,EAAmB,IAAIC,iBAAiB,0BACvBC,UAAY,SAAAC,GAC3BZ,EAAuBY,EAAEC,KAAKd,IAAKa,EAAEC,KAAKtD,OAGvCkD,EAGT,SAASL,IACyB,IAA5BR,EAAmBkB,MAAcL,IACnCA,EAAiBM,QACjBN,EAAmB,MCpFvB,ICcsC,E,EDZhCO,EAAoB,+BAEtBC,EAAgC,KACpC,SAASC,IAcP,OAbKD,IACHA,EAAY,iBAPM,kCACG,GAM+B,YAMlD,OAAQ,EAAUE,YAChB,KAAK,EACH,EAAUC,kBAAkBJ,QAI7BC,EAgBT,SAAsB,EACpB,EACA,G,8IAGW,OADL,EAAM,EAAO,GACR,GAAM,K,OAGA,OAHX,EAAK,SACL,EAAK,EAAG,YAAY,EAAmB,aAE5B,IADX,EAAc,EAAG,YAAY,IACA,IAAI,I,OACvC,OADM,EAAW,SACjB,GAAM,EAAY,IAAI,EAAO,I,OAC7B,OADA,SACA,GAAM,EAAG,U,OAMT,OANA,SAEK,GAAY,EAAS,MAAQ,EAAM,KACtC,EAAW,EAAW,EAAM,KAG9B,GAAO,UAIT,SAAsB,EAAO,G,0IAEhB,OADL,EAAM,EAAO,GACR,GAAM,K,OAEjB,OAFM,EAAK,SAEX,IADM,EAAK,EAAG,YAAY,EAAmB,cACpC,YAAY,GAAmB,OAAO,I,OAC/C,OADA,SACA,GAAM,EAAG,U,cAAT,S,WASF,SAAsB,EACpB,EACA,G,gJAGW,OADL,EAAM,EAAO,GACR,GAAM,K,OAG+B,OAH1C,EAAK,SACL,EAAK,EAAG,YAAY,EAAmB,aAEG,IAD1C,EAAQ,EAAG,YAAY,IAC+B,IAAI,I,cAA1D,EAA0C,cAG/B,KAFX,EAAW,EAAS,IAEtB,MACF,GAAM,EAAM,OAAO,I,cAAnB,S,aAEA,SAAM,EAAM,IAAI,EAAU,I,OAA1B,S,iBAEF,SAAM,EAAG,U,OAMT,OANA,UAEI,GAAc,GAAY,EAAS,MAAQ,EAAS,KACtD,EAAW,EAAW,EAAS,KAGjC,GAAO,UEzET,SAAsBI,EACpBxE,G,0IAI0B,SAAMyE,EAAOzE,GAAW,SAAA0E,GAChD,IAAMC,EAwBV,SACED,GAOA,OAAOE,EAL0BF,GAAY,CAC3ChE,IAAKqB,IACLR,mBAAoB,IA7BMsD,CAAgCH,GACpDI,EAyCV,SACE9E,EACA2E,GAEA,GAA6C,IAAzCA,EAAkBpD,mBAAkD,CACtE,IAAKwD,UAAUC,OAAQ,CAErB,IAAMC,EAA+BtD,QAAQuD,OAC3C/F,EAAcC,OAAO,gBAEvB,MAAO,CACLuF,kBAAiB,EACjBQ,oBAAqBF,GAKzB,IAAMG,EAA+C,CACnD1E,IAAKiE,EAAkBjE,IACvBa,mBAAoB,EACpB8D,iBAAkB1G,KAAKC,OAEnBuG,EAkBV,SACEnF,EACA2E,G,wIAGsC,O,sBAAA,GAAMlE,EACxCT,EACA2E,I,OAEF,OAJMW,EAA8B,SAI7B,CAAP,EAAOC,EAAIvF,EAAWsF,I,cAElBE,E,aAAqC,MAAjB,EAAEnG,WAGxB,GAAMoG,EAAOzF,IAHX,M,cAGF,S,aAGA,SAAMuF,EAAIvF,EAAW,CACnBU,IAAKiE,EAAkBjE,IACvBa,mBAAoB,K,OAFtB,S,iBAKF,MAAM,E,wBAxCsBmE,CAC1B1F,EACAoF,GAEF,MAAO,CAAET,kBAAmBS,EAAiBD,oBAAmB,GAC3D,OACoC,IAAzCR,EAAkBpD,mBAEX,CACLoD,kBAAiB,EACjBQ,oBAAqBQ,EAAyB3F,IAGzC,CAAE2E,kBAAiB,GA5EDiB,CACvB5F,EACA2E,GAGF,OADAQ,EAAsBL,EAAiBK,oBAChCL,EAAiBH,sB,aNjCD,MM0BnBA,EAAoB,UAUJjE,IAAlB,O,KAE0B,GAAMyE,I,OAAlC,MAAO,CAAP,GAAS,EAAAR,kBAAmB,SAA0B,I,OAGxD,MAAO,CAAP,EAAO,CACLA,kBAAiB,EACjBQ,oBAAmB,WA6FvB,SAAeQ,EACb3F,G,4IAM+B,SAAM6F,EAA0B7F,I,OAA3D8F,EAA2B,S,wBACK,IAA7BA,EAAMvE,mBAAgD,MAE3D,GAAME,EAAM,M,OAEJ,OAFR,SAEQ,GAAMoE,EAA0B7F,I,cAAxC8F,EAAQ,S,oBAGuB,IAA7BA,EAAMvE,mBAAN,MAKE,GAAMiD,EAAqBxE,I,OAE/B,OALM,EAGF,SAFF2E,EAAiB,qBACjBQ,EAAmB,uBAIZ,CAAP,EAAOA,GAGA,CAAP,EAAOR,G,OAIX,MAAO,CAAP,EAAOmB,UAWT,SAASD,EACP7F,GAEA,OAAOyE,EAAOzE,GAAW,SAAA0E,GACvB,IAAKA,EACH,MAAMvF,EAAcC,OAAO,0BAE7B,OAAOwF,EAAqBF,MAIhC,SAASE,EAAqBkB,GAC5B,OAc2C,KAH3CnB,EAXmCmB,GAcfvE,oBAClBoD,EAAkBU,iBV7MY,IU6M4B1G,KAAKC,MAdxD,CACL8B,IAAKoF,EAAMpF,IACXa,mBAAoB,GAIjBuE,EAGT,IACEnB,E,SC3LoBoB,EACpB,EACApB,G,IADE3E,EAAA,EAAAA,UAAWgG,EAAA,EAAAA,uB,kJA2BI,OAxBXrF,EAoCR,SACEX,EACA,G,IAAEU,EAAA,EAAAA,IAEF,OAAU3C,EAAyBiC,GAAU,IAAIU,EAAG,uBAxCnCuF,CAA6BjG,EAAW2E,GAEnDzE,EAAUH,EAAmBC,EAAW2E,IAGxCuB,EAAiBF,EAAuBG,aAAa,CACzDC,UAAU,MAGVlG,EAAQC,OAAO,oBAAqB+F,EAAeG,yBAG/CzF,EAAO,CACX0F,aAAc,CACZvF,WX9ByB,YWkCvBC,EAAuB,CAC3BC,OAAQ,OACRf,QAAO,EACPU,KAAMM,KAAKC,UAAUP,IAGN,GAAMN,GAAmB,WAAM,OAAAc,MAAMT,EAAUK,O,cAA1D7C,EAAW,UACJkD,GACsC,GAAMlD,EAASY,QAD9D,M,OAKF,OAJMuC,EAA2C,SAI1C,CAAP,EAH+CpD,EAC7CoD,I,OAII,SAAMzC,EAAqB,sBAAuBV,I,OAAxD,MAAM,gBC9BV,SAAsBoI,EACpBC,EACAC,G,YAAA,IAAAA,OAAA,G,mIAGc,SAAMhC,EAAO+B,EAAaxG,WAAW,SAAA0E,GACjD,IAAKgC,EAAkBhC,GACrB,MAAMvF,EAAcC,OAAO,kBAG7B,IAAMuH,EAAejC,EAASlD,UAC9B,IAAKiF,GA4HT,SAA0BjF,GACxB,OAC8B,IAA5BA,EAAUnD,gBAKd,SAA4BmD,GAC1B,IAAM5C,EAAMD,KAAKC,MACjB,OACEA,EAAM4C,EAAU9C,cAChB8C,EAAU9C,aAAe8C,EAAUlD,UAAYM,EZ9JZ,KYsJlCgI,CAAmBpF,GA/HCqF,CAAiBF,GAEpC,OAAOjC,EACF,GAAmC,IAA/BiC,EAAatI,cAGtB,OADAyI,EA0BN,SACEN,EACAC,G,wIAMY,SAAMM,EAAuBP,EAAaxG,Y,OAAlD8F,EAAQ,S,wBAC6B,IAAlCA,EAAMtE,UAAUnD,cAA2C,MAEhE,GAAMoD,EAAM,M,OAEJ,OAFR,SAEQ,GAAMsF,EAAuBP,EAAaxG,Y,cAAlD8F,EAAQ,S,aAIV,OAAgC,KAD1BtE,EAAYsE,EAAMtE,WACVnD,cAEL,CAAP,EAAOkI,EAAiBC,EAAcC,IAE/B,CAAP,EAAOjF,UA/CUwF,CAA0BR,EAAcC,GAChD/B,EAGP,IAAKK,UAAUC,OACb,MAAM7F,EAAcC,OAAO,eAG7B,IAAMgG,EA+HZ,SACEV,GAEA,IAAMuC,EAA2C,CAC/C5I,cAAe,EACf6I,YAAavI,KAAKC,OAEpB,OAAO,yCACF8F,GAAQ,CACXlD,UAAWyF,IAxIeE,CAAoCzC,GAE5D,OADAoC,EAsEN,SACEN,EACA7B,G,0IAGoB,O,sBAAA,GAAMoB,EACtBS,EACA7B,I,OAMF,OARMnD,EAAY,SAIZ4F,EAAwB,yCACzBzC,GAAiB,CACpBnD,UAAS,IAEX,GAAM+D,EAAIiB,EAAaxG,UAAWoH,I,OAClC,OADA,SACO,CAAP,EAAO5F,G,cAEHgE,E,aAAsC,MAAjB,EAAEnG,YAAuC,MAAjB,EAAEA,WAA/C,MAGF,GAAMoG,EAAOe,EAAaxG,Y,cAA1B,S,aAMA,OAJMoH,EAAwB,yCACzBzC,GAAiB,CACpBnD,UAAW,CAAEnD,cAAe,KAE9B,GAAMkH,EAAIiB,EAAaxG,UAAWoH,I,OAAlC,S,iBAEF,MAAM,E,wBAjGWC,CAAyBb,EAAcpB,GAC/CA,M,cArBLU,EAAQ,SAyBIgB,EACd,GAAMA,GADQ,M,cACd,W,aACA,EAAChB,EAAMtE,U,iBACX,MAAO,CAAP,EAHkB,UA6CpB,SAASuF,EACP/G,GAEA,OAAOyE,EAAOzE,GAAW,SAAA0E,GACvB,IAAKgC,EAAkBhC,GACrB,MAAMvF,EAAcC,OAAO,kBAG7B,IAiFiCoC,EAjF3BmF,EAAejC,EAASlD,UAC9B,OAkF4B,KAFKA,EAhFDmF,GAkFtBtI,eACVmD,EAAU0F,YZ3LoB,IY2LevI,KAAKC,MAlFzC,yCACF8F,GAAQ,CACXlD,UAAW,CAAEnD,cAAe,KAIzBqG,KAmCX,SAASgC,EACP/B,GAEA,YACwB2C,IAAtB3C,GACyC,IAAzCA,EAAkBpD,mBCxItB,SAAegG,EACbvH,G,sIAEgC,SAAMwE,EAAqBxE,I,cAAnDmF,EAAwB,SAAqC,qBAInE,GAAMA,GAFJ,M,OAEF,S,2CCfkBqC,EACpBxH,EACA2E,G,4IAUiB,OARXhE,EAcR,SACEX,EACA,G,IAAEU,EAAA,EAAAA,IAEF,OAAU3C,EAAyBiC,GAAU,IAAIU,EAlBhC+G,CAAkBzH,EAAW2E,GAExCzE,EAAUH,EAAmBC,EAAW2E,GACxC3D,EAAuB,CAC3BC,OAAQ,SACRf,QAAO,GAGQ,GAAMI,GAAmB,WAAM,OAAAc,MAAMT,EAAUK,O,cAA1D7C,EAAW,UACHkD,GAAV,MACI,GAAMxC,EAAqB,sBAAuBV,I,OAAxD,MAAM,S,wBCbV,SAAgBuJ,EACd,EACA/D,G,IADE3D,EAAA,EAAAA,UAKF,ORCF,SACEA,EACA2D,GAIAN,IAEA,IAAMH,EAAML,EAAO7C,GAEf2H,EAAc5E,EAAmBW,IAAIR,GACpCyE,IACHA,EAAc,IAAIC,IAClB7E,EAAmBwC,IAAIrC,EAAKyE,IAE9BA,EAAYE,IAAIlE,GQlBhBmE,CAAY9H,EAAW2D,GAEhB,YRmBT,SACE3D,EACA2D,GAEA,IAAMT,EAAML,EAAO7C,GAEb2H,EAAc5E,EAAmBW,IAAIR,GAEtCyE,IAILA,EAAYI,OAAOpE,GACM,IAArBgE,EAAY1D,MACdlB,EAAmBgF,OAAO7E,GAI5BK,KQpCEyE,CAAehI,EAAW2D,ICkB9B,SAAS,EAAqB,GAC5B,OAAO,EAAc,OAAM,4BAAsC,CAC/D,UAAS,KPjByB,EAmChB,KAhCX,SAAS,kBAChB,IAAI,YAHoB,iBAKtB,YACE,IAAM,EAAM,EAAU,YAAY,OAAO,eAKnC,EAAqC,CACzC,U,SO5BuBsE,G,QAC/B,IAAKA,IAAQA,EAAIC,QACf,MAAMC,EAAqB,qBAG7B,IAAKF,EAAIG,KACP,MAAMD,EAAqB,Y,IAU7B,IAAsB,yBAN2B,CAC/C,YACA,SACA,UAG8B,8BAAE,CAA7B,IAAM,EAAO,QAChB,IAAK,EAAI,QAAQ,GACf,MAAM,EAAqB,I,iGAI/B,MAAO,CACL,QAAS,EAAI,KACb,UAAW,EAAI,QAAQ,UACvB,OAAQ,EAAI,QAAQ,OACpB,MAAO,EAAID,QAAQ,OPDG,CAAiB,GAIjC,uBAH6B,EAAU,YAAY,oBAerD,MAT+D,CAC7D,IAAG,EACH,MAAO,WAAM,O,SQlCrB1B,G,0IAEmD,SAAMhC,EACvDgC,EAAaxG,Y,OAWf,OAZM,EAA6C,SAA3C2E,EAAiB,qBAAEQ,EAAmB,uBAK5CA,EAAoBkD,MAAMC,QAAQpJ,OAIlCqH,EAAiBC,GAAc6B,MAAMC,QAAQpJ,OAGxC,CAAP,EAAOyF,EAAkBjE,YRoBJ,CAAM,IACnB,SAAU,SAAC,GACT,O,SInCV8F,EACAC,G,YAAA,IAAAA,OAAA,G,yHAEA,SAAMc,EAAiCf,EAAaxG,Y,OAIlC,OAJlB,SAIkB,GAAMuG,EAAiBC,EAAcC,I,OACvD,MAAO,CAAP,EADkB,SACDrI,cJ2BP,CAAS,EAAc,IACzB,OAAQ,WAAM,O,SSnCtBoI,G,wIAIc,SAAM/B,EAFZzE,EAAcwG,EAAY,WAEI,SAAA9B,GACpC,IAAIA,GAA4C,IAAhCA,EAASnD,mBAIzB,OAAOmD,M,YALHoB,EAAQ,UAQV,Y,GAC+B,IAA7BA,EAAMvE,mBAAN,YAEF,MAAMpC,EAAcC,OAAO,+B,UACW,IAA7B0G,EAAMvE,mBAAN,Y,GACJwD,UAAUC,OAAX,YACF,MAAM7F,EAAcC,OAAO,e,OAE3B,SAAMoI,EAA0BxH,EAAW8F,I,OAC3C,OADA,SACA,GAAML,EAAOzF,I,OAAb,S,kCTcgB,CAAmB,IACjC,WAAY,SAAC,GACX,SAAW,EAAc,OAG9B,WAKL,EAAS,gB,mCV9BJ,IAAMuI,IAAS,MACpB,6BACE,kDACF,8BACE,gDACF,0BACE,wDACF,wBACE,qEACF,wBACE,mEACF,yBACE,2EACF,wCACE,+EACF,4BACE,oEACF,8BACE,2DACF,8BACE,wEAEF,yBACE,mEACF,2BACE,wDACF,4BACE,4IAEF,6BACE,uEACF,wBACE,iEACF,uBAA+B,yCAC/B,mCACE,wI,GAcS,EAAgB,IAAI,eAC/B,YACA,YACAA,GiBpCF,SAAS,EAAqBC,GAC5B,OAAO,EAAcpJ,OAAO,4BAAqC,CAC/DoJ,UAAS,I,SGxCGC,EAAcnG,GAC5B,IAAMoG,EAAa,IAAIzG,WAAWK,GAElC,OADqBC,KAAKC,OAAOC,aAAY,MAAnBD,OAAM,mBAAiBkG,KAE9CjK,QAAQ,KAAM,IACdA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KC6CpB,SAAsBkK,GACpBC,G,qJAEI,cAAeC,UAIC,GAAOA,UAEtBC,aAND,M,OASF,GALMA,EAAY,UAGFA,EAAUC,KAAI,SAAAC,GAAM,OAAAA,EAAGZ,QAE1Ba,SApBG,wBAsBd,MAAO,CAAP,EAAO,M,iBAMA,OAFPC,EAAoC,KAE7B,GAAM,iBA5BC,uBAKG,GAuBgC,SAAMF,GAAE,uD,kFAC3D,OAAIA,EAAG1E,WAAa,EAElB,IAGG0E,EAAGG,iBAAiBC,SA5BC,0BAkCZ,IADRC,EAAcL,EAAGM,YAAYD,YAjCT,2BAkCME,MAAM,eAAe7F,IAAIkF,IAJvD,I,OAKF,OADMY,EAAQ,SACd,GAAMH,EAAYI,S,OAElB,GAFA,UAEKD,EAEH,UAGF,GAAsB,IAAlBR,EAAG1E,WAAkB,CAGvB,KAFMoF,EAAaF,GAEHG,OAASD,EAAWE,SAAWF,EAAW/I,SACxD,UAGFuI,EAAe,CACb9K,MAAOsL,EAAWG,SAClBC,YAAU,EAAEJ,EAAWI,WAAU,UAAInL,KAAKC,OAC1CmL,oBAAqB,CACnBJ,KAAMD,EAAWC,KACjBC,OAAQF,EAAWE,OACnBjJ,SAAU+I,EAAW/I,SACrBqJ,QAASN,EAAWM,QACpBC,SACiC,iBAAxBP,EAAWO,SACdP,EAAWO,SACXxB,EAAciB,EAAWO,iBAGR,IAAlBjB,EAAG1E,WAGZ4E,EAAe,CACb9K,OAHIsL,EAAaF,GAGCK,SAClBC,WAAYJ,EAAWI,WACvBC,oBAAqB,CACnBJ,KAAMlB,EAAciB,EAAWC,MAC/BC,OAAQnB,EAAciB,EAAWE,QACjCjJ,SAAU+I,EAAW/I,SACrBqJ,QAASN,EAAWM,QACpBC,SAAUxB,EAAciB,EAAWO,YAGZ,IAAlBjB,EAAG1E,aAGZ4E,EAAe,CACb9K,OAHIsL,EAAaF,GAGCK,SAClBC,WAAYJ,EAAWI,WACvBC,oBAAqB,CACnBJ,KAAMlB,EAAciB,EAAWC,MAC/BC,OAAQnB,EAAciB,EAAWE,QACjCjJ,SAAU+I,EAAW/I,SACrBqJ,QAASN,EAAWM,QACpBC,SAAUxB,EAAciB,EAAWO,a,4BAQ3C,OA1EW,SAuER/F,QAGH,GAAM,mBAtGY,yB,OAuGlB,OADA,SACA,GAAM,mBAAS,yB,OACf,OADA,SACA,GAAM,mBAAS,c,OAEf,OAFA,SAEO,CAAP,EAAOgG,GAAkBhB,GAAgBA,EAAe,aAG1D,SAASgB,GACPhB,GAEA,IAAKA,IAAiBA,EAAaa,oBACjC,OAAO,EAED,IAAAA,EAAA,EAAAA,oBACR,MACqC,iBAA5Bb,EAAaY,YACpBZ,EAAaY,WAAa,GACI,iBAAvBZ,EAAa9K,OACpB8K,EAAa9K,MAAM+L,OAAS,GACQ,iBAA7BJ,EAAoBJ,MAC3BI,EAAoBJ,KAAKQ,OAAS,GACI,iBAA/BJ,EAAoBH,QAC3BG,EAAoBH,OAAOO,OAAS,GACI,iBAAjCJ,EAAoBpJ,UAC3BoJ,EAAoBpJ,SAASwJ,OAAS,GACC,iBAAhCJ,EAAoBC,SAC3BD,EAAoBC,QAAQG,OAAS,GACG,iBAAjCJ,EAAoBE,UAC3BF,EAAoBE,SAASE,OAAS,EZvKnC,IAIH,GAAgC,KACpC,SAAS,KAcP,OAbK,KACH,GAAY,iBAPa,8BACJ,GAM+B,SAAAC,GAMlD,OAAQA,EAAU9F,YAChB,KAAK,EACH8F,EAAU7F,kBAbM,iCAiBjB,GAIT,SAAsB8F,GACpBC,G,0IAGW,OADLpH,EAAM,GAAOoH,GACR,GAAM,M,OACI,SADV,SAERhB,YA3BqB,4BA4BrBD,YA5BqB,4BA6BrB3F,IAAIR,I,cAHDgG,EAAe,UAMZ,CAAP,EAAOA,GADL,M,OAIsB,SAAMP,GAC5B2B,EAAqBtK,UAAU4I,W,cAD3B2B,EAAkB,UAItB,GAAMC,GAAMF,EAAsBC,IADhC,M,OAEF,OADA,SACO,CAAP,EAAOA,G,wBAMb,SAAsBC,GACpBF,EACApB,G,0IAGW,OADLhG,EAAM,GAAOoH,GACR,GAAM,M,OAEjB,OAFMtB,EAAK,SAEX,IADMyB,EAAKzB,EAAGM,YApDU,2BAoDqB,cACpCD,YArDe,4BAqDgBqB,IAAIxB,EAAchG,I,OAC1D,OADA,SACA,GAAMuH,EAAGE,U,OACT,OADA,SACO,CAAP,EAAOzB,UAIT,SAAsB0B,GACpBN,G,0IAGW,OADLpH,EAAM,GAAOoH,GACR,GAAM,M,OAEjB,OAFMtB,EAAK,SAEX,IADMyB,EAAKzB,EAAGM,YAhEU,2BAgEqB,cACpCD,YAjEe,4BAiEgBtB,OAAO7E,I,OAC/C,OADA,SACA,GAAMuH,EAAGE,U,cAAT,S,WAYF,SAAS,GAAO,GACd,OADgB,EAAA3K,UACCc,MRvFZ,IAGM+J,GACX,0F,SqBgBoBC,GACpBR,EACAP,G,gJAEgB,SAAM,GAAWO,I,OAA3BpK,EAAU,SACVU,EAAOmK,GAAQhB,GAEfiB,EAAmB,CACvB/J,OAAQ,OACRf,QAAO,EACPU,KAAMM,KAAKC,UAAUP,I,iBAKJ,O,sBAAA,GAAMQ,MACrB6J,GAAYX,EAAqBtK,WACjCgL,I,OAEa,SAJE,SAIajM,Q,cAA9BmM,EAAe,S,aAEf,M,WAAM,EAAc9L,OAAO,yBAAkC,CAC3D+L,UAAW,I,OAIf,GAAID,EAAahM,MAEf,MADMM,EAAU0L,EAAahM,MAAMM,QAC7B,EAAcJ,OAAO,yBAAkC,CAC3D+L,UAAW3L,IAIf,IAAK0L,EAAa9M,MAChB,MAAM,EAAcgB,OAAO,4BAG7B,MAAO,CAAP,EAAO8L,EAAa9M,cAGtB,SAAsBgN,GACpBd,EACApB,G,gJAEgB,SAAM,GAAWoB,I,OAA3BpK,EAAU,SACVU,EAAOmK,GAAQ7B,EAAaa,qBAE5BsB,EAAgB,CACpBpK,OAAQ,QACRf,QAAO,EACPU,KAAMM,KAAKC,UAAUP,I,iBAKJ,O,sBAAA,GAAMQ,MAClB6J,GAAYX,EAAqBtK,WAAU,IAAIkJ,EAAa9K,MAC/DiN,I,OAEa,SAJE,SAIatM,Q,cAA9BmM,EAAe,S,aAEf,M,WAAM,EAAc9L,OAAO,sBAA+B,CACxD+L,UAAW,I,OAIf,GAAID,EAAahM,MAEf,MADMM,EAAU0L,EAAahM,MAAMM,QAC7B,EAAcJ,OAAO,sBAA+B,CACxD+L,UAAW3L,IAIf,IAAK0L,EAAa9M,MAChB,MAAM,EAAcgB,OAAO,yBAG7B,MAAO,CAAP,EAAO8L,EAAa9M,cAGtB,SAAsBkN,GACpBhB,EACAlM,G,8IAEgB,SAAM,GAAWkM,I,OAA3BpK,EAAU,SAEVqL,EAAqB,CACzBtK,OAAQ,SACRf,QAAO,G,iBAIU,O,sBAAA,GAAMkB,MAClB6J,GAAYX,EAAqBtK,WAAU,IAAI5B,EAClDmN,I,OAEgC,SAJjB,SAIgCxM,Q,OACjD,IADMmM,EAA4B,UACjBhM,MAEf,MADMM,EAAU0L,EAAahM,MAAMM,QAC7B,EAAcJ,OAAO,2BAAoC,CAC7D+L,UAAW3L,I,mBAIf,M,WAAM,EAAcJ,OAAO,2BAAoC,CAC7D+L,UAAW,I,wBAKjB,SAASF,GAAY,GACnB,MAAUO,uDADW,EAAAvN,UACoB,iBAG3C,SAAe,GAAW,G,IACxB+B,EAAA,EAAAA,UACAyL,EAAA,EAAAA,c,sIAEkB,SAAMA,EAAcC,Y,OAEtC,OAFMlK,EAAY,SAEX,CAAP,EAAO,IAAI3B,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,mBACR,iBAAkBE,EAAUJ,OAC5B,qCAAsC,OAAO4B,YAIjD,SAASuJ,GAAQ,G,IACfnB,EAAA,EAAAA,OACAD,EAAA,EAAAA,KACAhJ,EAAA,EAAAA,SACAsJ,EAAA,EAAAA,SAEMrJ,EAAuB,CAC3B+K,IAAK,CACHhL,SAAQ,EACRgJ,KAAI,EACJC,OAAM,IAQV,OAJIK,IAAaY,KACfjK,EAAK+K,IAAIC,kBAAoB3B,GAGxBrJ,EC9JT,ICNYiL,GDQZ,SAAsB,GACpBvB,EACAwB,EACA7B,G,4IAEA,GAAgC,YAA5B8B,aAAaC,WACf,MAAM,EAAc5M,OAAO,sBAKJ,SAAM6M,GAAoBH,EAAgB7B,I,OAC9C,OADfiC,EAAmB,SACJ,GAAM7B,GAAMC,I,cAA3BpB,EAAe,SAEfa,EAA2C,CAC/CE,SAAQ,EACRD,QAAS8B,EAAeK,MACxBxL,SAAUuL,EAAiBvL,SAC3BgJ,KAAMlB,EAAcyD,EAAiBrJ,OAAO,SAC5C+G,OAAQnB,EAAcyD,EAAiBrJ,OAAO,YAG3CqG,EAAD,MAEK,CAAP,EAAOkD,GAAY9B,EAAsBP,I,UAqH3CsC,EAnHgBnD,EAAaa,oBAsHvBuC,GAFNC,EApHmDxC,GAsHZE,WAAaoC,EAAUpC,SACxDuC,EAAkBD,EAAe5L,WAAa0L,EAAU1L,SACxD8L,EAAcF,EAAe5C,OAAS0C,EAAU1C,KAChD+C,EAAgBH,EAAe3C,SAAWyC,EAAUzC,OAEnD0C,GAAmBE,GAAmBC,GAAeC,EA3H1D,Y,iBAIE,O,sBAAA,GAAMpB,GAAmBhB,EAAsBpB,EAAa9K,Q,cAA5D,S,+BAGAkK,QAAQqE,KAAK,G,aAGf,MAAO,CAAP,EAAOP,GAAY9B,EAAsBP,I,OACpC,OAAIpL,KAAKC,OAASsK,EAAaY,WAvCZ,OAyCjB,CAAP,EAAO8C,GACL,CACExO,MAAO8K,EAAa9K,MACpB0L,WAAYnL,KAAKC,MACjBmL,oBAAmB,GAErBO,EACAwB,IAIK,CAAP,EAAO5C,EAAa9K,O,iBA0FxB,IACEiO,EACAE,EAEMD,EACAE,EACAC,EACAC,QAzFR,SAAsBG,GACpBvC,EACAwB,G,wIAEqB,SAAMzB,GAAMC,I,cAA3BpB,EAAe,UAEnB,GAAMoC,GAAmBhB,EAAsBpB,EAAa9K,QAD1D,M,OAEF,OADA,SACA,GAAMwM,GAASN,I,OAAf,S,iBAIuB,SAAMwB,EAAegB,YAAYC,mB,OAC1D,OADMb,EAAmB,UAEhB,CAAP,EAAOA,EAAiBc,eAInB,CAAP,GAAO,UAGT,SAAeJ,GACb1D,EACAoB,EACAwB,G,0IAGuB,O,sBAAA,GAAMV,GACzBd,EACApB,I,OASF,OAXM+D,EAAe,SAKfC,EAAmB,oBACvB9O,MAAO6O,EACPnD,WAAYnL,KAAKC,OACdsK,GAGL,GAAMsB,GAAMF,EAAsB4C,I,OAClC,OADA,SACO,CAAP,EAAOD,G,OAEP,O,WAAA,GAAMJ,GAAYvC,EAAsBwB,I,OACxC,MADA,SACM,E,wBAIV,SAAeM,GACb9B,EACAP,G,wIAEc,SAAMe,GAClBR,EACAP,I,OAOF,OATM3L,EAAQ,SAIR8K,EAA6B,CACjC9K,MAAK,EACL0L,WAAYnL,KAAKC,MACjBmL,oBAAmB,GAErB,GAAMS,GAAMF,EAAsBpB,I,OAClC,OADA,SACO,CAAP,EAAOA,EAAa9K,cAMtB,SAAe6N,GACbH,EACA7B,G,sIAEqB,SAAM6B,EAAegB,YAAYC,mB,OACtD,OADMI,EAAe,UAEZ,CAAP,EAAOA,GAEF,CAAP,EAAOrB,EAAegB,YAAYM,UAAU,CAC1CC,iBAAiB,EACjBC,qBAAsBrD,YE9I1B,SAEgBsD,GAAiBvJ,GAG/B,MAAuB,iBAATA,KAAuBA,GxBKJ,oBwBLmCA,GDJtE,SAAY6H,GACV,gCACA,8CAFF,CAAYA,QAAW,KEkBvB,kBAKE,WACmBvB,GADnB,WACmB,KAAAA,uBALX,KAAAL,SAA0B,KAE1B,KAAAuD,kBAA2C,KAKjDzI,UAAU0I,cAAcC,iBAAiB,WAAW,SAAA3J,GAClD,SAAK4J,qBAAqB5J,MA0KhC,OAtKE,sBAAI,kBAAG,C,IAAP,WACE,OAAO6J,KAAKtD,qBAAqBrC,K,gCAG7B,YAAAyD,SAAN,W,sIAKyB,OAJlBkC,KAAK3D,WACR2D,KAAK3D,SAAWY,IAGK,GAAM+C,KAAKC,gC,cAA5B/B,EAAiB,SAGS,YAA5BC,aAAaC,WAAb,MAEF,GAAMD,aAAa+B,qB,OAAnB,S,iBAGF,GAAgC,YAA5B/B,aAAaC,WACf,MAAM,EAAc5M,OAAO,sBAG7B,MAAO,CAAP,EAAO,GAASwO,KAAKtD,qBAAsBwB,EAAgB8B,KAAK3D,mBAG5D,YAAA4C,YAAN,W,sIACyB,SAAMe,KAAKC,gC,OAElC,OAFM/B,EAAiB,SAEhB,CAAP,EAAOe,GAAYe,KAAKtD,qBAAsBwB,YAW1C,YAAAgC,kBAAN,W,sIACE,MAAgC,YAA5B/B,aAAaC,WACf,IAGuB,GAAMD,aAAa+B,qB,OAC5C,GAAyB,aADnBC,EAAmB,UAEvB,UACK,KAAyB,WAArBA,EACH,EAAc3O,OAAO,sBAErB,EAAcA,OAAO,8BAK/B,YAAA4O,kBAAA,SAAkB/D,GAChB,GAAsB,OAAlB2D,KAAK3D,SACP,MAAM,EAAc7K,OAAO,iCAG7B,GAAwB,iBAAb6K,GAA6C,IAApBA,EAASE,OAC3C,MAAM,EAAc/K,OAAO,qBAG7BwO,KAAK3D,SAAWA,GAGlB,YAAAgE,iBAAA,SAAiBnC,GACf,KAAMA,aAA0BoC,2BAC9B,MAAM,EAAc9O,OAAO,2BAG7B,GAAIwO,KAAK9B,eACP,MAAM,EAAc1M,OAAO,0BAG7BwO,KAAK9B,eAAiBA,GASxB,YAAAqC,UAAA,SAAUC,GAAV,WAME,OALAR,KAAKJ,kBACuB,mBAAnBY,EACHA,EACAA,EAAeC,KAEd,WACL,EAAKb,kBAAoB,OAI7B,YAAAc,4BAAA,WACE,MAAM,EAAclP,OAAO,yBAI7B,YAAAmP,eAAA,WACE,OAAO,cAOK,YAAAV,6BAAd,W,2IAGOD,KAAK9B,eAAN,Y,iBAEsB,O,sBAAtB,EAAA8B,KAAsB,GAAM7I,UAAU0I,cAAce,SzBlJ7B,4ByBoJrB,CACErC,MzBpJoB,0C,cyBiJxB,EAAKL,eAAiB,S,aAOtB,M,WAAM,EAAc1M,OAAO,qCAAuC,CAChEqP,oBAAqB,EAAEjP,U,OAK7B,MAAO,CAAP,EAAOoO,KAAK9B,wBAGA,YAAA6B,qBAAd,SAAmCe,G,kJACjC,OAAe,QAAX,EAACA,EAAM1K,YAAI,eAAE2K,oBAKX,EAAqBD,EAAM1K,KAAyB2K,kBAAlDC,EAAI,OAAEC,EAAO,UAEjBjB,KAAKJ,mBAAqBoB,IAAS/C,GAAYiD,eACjDlB,KAAKJ,kBAAkBqB,GAKvBtB,GAFMvJ,EAAS6K,EAAO,OAGuB,MAA7C7K,EzBlK4C,gByBqK5C,GAAM4J,KAAKmB,SAASH,EAAM5K,IAJ1B,OAXA,I,OAeA,S,mCAIU,YAAA+K,SAAd,SACEC,EACAhL,G,sIAGkB,OADZiL,EAaV,SAAsBD,GACpB,OAAQA,GACN,KAAKnD,GAAYqD,qBACf,MAAO,oBACT,KAAKrD,GAAYiD,cACf,MAAO,0BACT,QACE,MAAM,IAAIK,OApBMC,CAAaJ,GACb,GAAMpB,KAAKtD,qBAAqB+E,kBAAkB3L,O,cAAlD,SACRqL,SAASE,EAAW,CAE5BK,WAAYtL,EzBrLiB,mByBsL7BuL,aAAcvL,EzBrLiB,kByBsL/BwL,aAAcxL,EzBrLiB,iByBsL/ByL,oBAAqBC,KAAKC,MAAMhR,KAAKC,MAAQ,O,YAInD,EAnLA,GCEA,kBAIE,WACmB0L,GADnB,WACmB,KAAAA,uBAJX,KAAAL,SAA0B,KAC1B,KAAA2F,iBAA4C,KAKlD1N,KAAKwL,iBAAiB,QAAQ,SAAA3J,GAC5BA,EAAE8L,UAAU,EAAKC,OAAO/L,OAE1B7B,KAAKwL,iBAAiB,0BAA0B,SAAA3J,GAC9CA,EAAE8L,UAAU,EAAKE,YAAYhM,OAE/B7B,KAAKwL,iBAAiB,qBAAqB,SAAA3J,GACzCA,EAAE8L,UAAU,EAAKG,oBAAoBjM,OAiL3C,OA7KE,sBAAI,kBAAG,C,IAAP,WACE,OAAO6J,KAAKtD,qBAAqBrC,K,gCAkBnC,YAAAqG,4BAAA,SAA4B3K,GAC1B,IAAKA,GAAgC,mBAAbA,EACtB,MAAM,EAAcvE,OAAO,sBAG7BwO,KAAKgC,iBAAmBjM,GAKpB,YAAA+H,SAAN,W,uJACOkC,KAAK3D,SAAN,MAKmB,GAAMI,GAAMuD,KAAKtD,uB,OAAhCpB,EAAe,SACrB0E,KAAK3D,SACwC,OADhC,EACsB,QADtB,EACC,QADD,EACXf,SAAY,eAAEa,2BAAmB,eAAEE,UAAQ,EAAIY,G,iBAGnD,MAAO,CAAP,EAAO,GACL+C,KAAKtD,qBACLpI,KAAK+N,aACLrC,KAAK3D,mBAMT,YAAA4C,YAAA,WACE,OAAOA,GAAYe,KAAKtD,qBAAsBpI,KAAK+N,eAGrD,YAAAnC,kBAAA,WACE,MAAM,EAAc1O,OAAO,6BAK7B,YAAA4O,kBAAA,SAAkB/D,GAChB,GAAsB,OAAlB2D,KAAK3D,SACP,MAAM,EAAc7K,OAAO,iCAG7B,GAAwB,iBAAb6K,GAA6C,IAApBA,EAASE,OAC3C,MAAM,EAAc/K,OAAO,qBAG7BwO,KAAK3D,SAAWA,GAGlB,YAAAgE,iBAAA,WACE,MAAM,EAAc7O,OAAO,6BAG7B,YAAA+O,UAAA,WACE,MAAM,EAAc/O,OAAO,6BAG7B,YAAAmP,eAAA,WACE,MAAM,EAAcnP,OAAO,6BAevB,YAAA0Q,OAAN,SAAapB,G,0IAEX,OADMG,EA+EV,SAA2B,G,IAAE7K,EAAA,EAAAA,KAC3B,IAAKA,EACH,OAAO,KAGT,IACE,OAAOA,EAAKjF,OACZ,MAAOmR,GAEP,OAAO,MAxFSC,CAAkBzB,IAKf,GAAM0B,MAHvB,I,OAIF,OAsIJ,SAA2BC,GACzB,OAAOA,EAAWC,MAChB,SAAAC,GACE,MAA2B,YAA3BA,EAAOC,kBAGND,EAAOE,IAAIC,WAAW,0BA5IrBC,CADEN,EAAa,UAGV,CAAP,EAAOO,GAA2BP,EAAYxB,KAG1CgC,EAiFV,SACEhC,G,MAEA,IAAKA,GAA2C,iBAAzBA,EAAQiC,aAC7B,OAGF,IAAMC,EAAuB,sBACxBlC,EAAQiC,cAYb,OALAC,EAAwB/M,KAAO,yCAC1B6K,EAAQiC,aAAa9M,QAAI,MACpB,QAAG6K,EAAO,IAGbkC,EArGuBC,CAAoBnC,IAE9C,GAAMoC,GAAiBJ,IADrB,M,cACF,S,oBACSjD,KAAKgC,iBACd,GAAMhC,KAAKgC,iBAAiBf,IADnB,M,OACT,S,mCAIE,YAAAkB,YAAN,SAAkBrB,G,uJACYA,EAAK,gBAC7B,MAEF,GAAM7B,GAAYe,KAAKtD,qBAAsBpI,KAAK+N,e,OAClD,OADA,SACA,I,OAGmB,SAAM5F,GAAMuD,KAAKtD,uB,OACtC,OADMpB,EAAe,SACrB,GAAM2D,GAAYe,KAAKtD,qBAAsBpI,KAAK+N,e,OAClD,OADA,SACA,GAAM,GACJrC,KAAKtD,qBACLpI,KAAK+N,cAAY,EACgB,QADhB,EACL,QADK,EACjB/G,SAAY,eAAEa,2BAAmB,eAAEE,SAAQ,UAAIY,M,cAHjD,S,YAOI,YAAAmF,oBAAN,SAA0BtB,G,oJAExB,OADMG,EAAkD,QAA3C,EAAqC,QAArC,EAAmBH,EAAMoC,oBAAY,eAAE9M,YAAI,eAAU,SAIvD0K,EAAMwC,OAIf,KAIFxC,EAAMyC,2BACNzC,EAAMoC,aAAa5M,SAEbkN,EAkJV,SAAiBvC,G,UAETuC,EAA+B,QAA3B,EAAqB,QAArB,EAAGvC,EAAQwC,kBAAU,eAAED,YAAI,QAAwB,QAAxB,EAAIvC,EAAQiC,oBAAY,eAAEQ,aAC/D,GAAIF,EACF,OAAOA,EAGT,OAAI7D,GAAiBsB,EAAQ7K,MAEpB9B,KAAKqP,SAASC,OAEd,KA7JMC,CAAQ5C,IAKR,GAAM6C,GAAgBN,IAHjC,KAdA,I,cAiBEb,EAAS,UACT,MAGO,GAAMrO,KAAKyP,QAAQC,WAAWR,I,OAGvC,OAHAb,EAAS,SAGT,ICvMgB7O,EDuMJ,ICtMT,IAAIC,SAAc,SAAAC,GACvBC,WAAWD,EAASF,Q,cDqMlB,S,aAES,SAAM6O,EAAOsB,S,OAAtBtB,EAAS,S,iBAGX,OAAKA,GAKC/Q,EAAUsS,GAAiBjG,GAAYqD,qBAAsBL,GAC5D,CAAP,EAAO0B,EAAOjN,YAAY9D,KAJxB,IC9MN,IAAsBkC,SDoNtB,EA/LA,GAyOA,SAAegQ,GAAgBjB,G,kJAKV,OAFbsB,EAAY,IAAIC,IAAIvB,EAAKvO,KAAKqP,SAASU,MAAMA,KAEhC,GAAM7B,M,OAAnBC,EAAa,S,IAEnB,IAAqB,qBAAAA,GAAU,8BAE7B,GAFSE,EAAM,QACS,IAAIyB,IAAIzB,EAAOE,IAAKvO,KAAKqP,SAASU,MAAMA,OACxCF,EACtB,MAAO,CAAP,EAAOxB,G,iGAIX,MAAO,CAAP,EAAO,aAuBT,SAASK,GACPP,EACAxB,G,QAEMrP,EAAUsS,GAAiBjG,GAAYiD,cAAeD,G,IAE5D,IAAqB,yBAAAwB,GAAU,8BAAE,CAAhB,QACR/M,YAAY9D,I,kGAIvB,SAAS4Q,KACP,OAAOlO,KAAKyP,QAAQO,SAAS,CAC3BtD,KAAM,SACNuD,qBAAqB,IAKzB,SAASL,GACPlD,EACAC,GAEA,MAAO,CACLF,kBAAmB,CAAEC,KAAI,EAAEC,QAAO,IAItC,SAASoC,GAAiBmB,G,MAClBC,EAAqB,OAAhB,EAAGD,EAAQC,OAAK,EAAI,GAEvBC,EAAA,EAAAA,QACAC,EAAA,aAAAA,WAOR,OANID,GAAWC,GAAcD,EAAQnI,OAASoI,GAC5CjK,QAAQqE,KACN,8BAA8B4F,EAAU,0DAIrCrQ,KAAK+N,aAAagB,iBAAiBoB,EAAOD,GjB3RnD,IAAMI,GAAoB,CACxBC,YAAW,IA0Bb,SAASA,KACP,OAAIvQ,MAAQ,6BAA8BA,KA+BxC,cAAeA,MACD,OAAd2G,WACA,gBAAiB3G,MACjB,iBAAkBA,MAClBgM,0BAA0BwE,UAAUC,eAAe,qBACnDC,iBAAiBF,UAAUC,eAAe,UAtB1C,cAAeE,QACD,OAAdhK,WACA9D,UAAU+N,eACV,kBAAmB/N,WACnB,gBAAiB8N,QACjB,iBAAkBA,QAClB,UAAWA,QACX3E,0BAA0BwE,UAAUC,eAAe,qBACnDC,iBAAiBF,UAAUC,eAAe,UA9C7C,IAAgCI,SAASC,kBACxC,IAAI,YAnCiB,aACvB,SACEC,GAGA,IAAMhL,EAAMgL,EAAUC,YAAY,OAAO/M,eAKnCmE,EAAqD,CACzDrC,IAAG,EACHjI,U,SOzB6BiI,G,QAC/B,IAAKA,IAAQA,EAAIC,QACf,MAAM,EAAqB,4BAG7B,IAAKD,EAAIG,KACP,MAAM,EAAqB,YAI7B,IAOQF,EAAA,EAAAA,Q,IACR,IAAsB,yBARmC,CACvD,YACA,SACA,QACA,sBAI8B,8BAAE,CAA7B,IAAMiL,EAAO,QAChB,IAAKjL,EAAQiL,GACX,MAAM,EAAqBA,I,iGAI/B,MAAO,CACLrQ,QAASmF,EAAIG,KACbnK,UAAWiK,EAAQjK,UACnB2B,OAAQsI,EAAQtI,OAChBkB,MAAOoH,EAAQpH,MACf8H,SAAUV,EAAQkL,mBPVF,CAAiBnL,GAOjCwD,cANoBwH,EAAUC,YAAY,iBAAiB/M,eAO3DkJ,kBANwB4D,EAAUC,YAAY,uBAShD,IAAKT,KACH,MAAM,EAAcrT,OAAO,uBAG7B,OAAI8C,MAAQ,6BAA8BA,KAEjC,IAAI,GAAaoI,GAGjB,IAAI,GAAiBA,KAWf,UAEb+I,gBAAgBb,M,oBmBtEZ,SAAUc,GAAW,aAE3B,SAASC,EAAQC,GACf,OAAOC,MAAMf,UAAUgB,MAAMC,KAAKH,GAGpC,SAASI,EAAiB5S,GACxB,OAAO,IAAIW,SAAQ,SAASC,EAASsD,GACnClE,EAAQ6S,UAAY,WAClBjS,EAAQZ,EAAQR,SAGlBQ,EAAQ8S,QAAU,WAChB5O,EAAOlE,EAAQ9B,WAKrB,SAAS6U,EAAqBC,EAAK/S,EAAQgT,GACzC,IAAIjT,EACAkT,EAAI,IAAIvS,SAAQ,SAASC,EAASsD,GAEpC0O,EADA5S,EAAUgT,EAAI/S,GAAQkT,MAAMH,EAAKC,IACPG,KAAKxS,EAASsD,MAI1C,OADAgP,EAAElT,QAAUA,EACLkT,EAGT,SAASG,EAA2BL,EAAK/S,EAAQgT,GAC/C,IAAIC,EAAIH,EAAqBC,EAAK/S,EAAQgT,GAC1C,OAAOC,EAAEE,MAAK,SAAS5K,GACrB,GAAKA,EACL,OAAO,IAAI8K,EAAO9K,EAAO0K,EAAElT,YAI/B,SAASuT,EAAgBC,EAAYC,EAAYC,GAC/CA,EAAWC,SAAQ,SAASC,GAC1BC,OAAOC,eAAeN,EAAW9B,UAAWkC,EAAM,CAChDlR,IAAK,WACH,OAAOkK,KAAK6G,GAAYG,IAE1BrP,IAAK,SAASwP,GACZnH,KAAK6G,GAAYG,GAAQG,QAMjC,SAASC,EAAoBR,EAAYC,EAAYQ,EAAaP,GAChEA,EAAWC,SAAQ,SAASC,GACpBA,KAAQK,EAAYvC,YAC1B8B,EAAW9B,UAAUkC,GAAQ,WAC3B,OAAOb,EAAqBnG,KAAK6G,GAAaG,EAAMM,gBAK1D,SAASC,EAAaX,EAAYC,EAAYQ,EAAaP,GACzDA,EAAWC,SAAQ,SAASC,GACpBA,KAAQK,EAAYvC,YAC1B8B,EAAW9B,UAAUkC,GAAQ,WAC3B,OAAOhH,KAAK6G,GAAYG,GAAMT,MAAMvG,KAAK6G,GAAaS,gBAK5D,SAASE,EAA0BZ,EAAYC,EAAYQ,EAAaP,GACtEA,EAAWC,SAAQ,SAASC,GACpBA,KAAQK,EAAYvC,YAC1B8B,EAAW9B,UAAUkC,GAAQ,WAC3B,OAAOP,EAA2BzG,KAAK6G,GAAaG,EAAMM,gBAKhE,SAASG,EAAM9L,GACbqE,KAAK0H,OAAS/L,EAuBhB,SAAS+K,EAAOiB,EAAQvU,GACtB4M,KAAK4H,QAAUD,EACf3H,KAAK6H,SAAWzU,EA+BlB,SAAS0U,EAAYC,GACnB/H,KAAKgI,OAASD,EAuChB,SAASE,EAAYC,GACnBlI,KAAKmI,IAAMD,EACXlI,KAAKjD,SAAW,IAAIhJ,SAAQ,SAASC,EAASsD,GAC5C4Q,EAAeE,WAAa,WAC1BpU,KAEFkU,EAAehC,QAAU,WACvB5O,EAAO4Q,EAAe5W,QAExB4W,EAAeG,QAAU,WACvB/Q,EAAO4Q,EAAe5W,WAkB5B,SAASgX,EAAUlN,EAAI1E,EAAYgF,GACjCsE,KAAKuI,IAAMnN,EACX4E,KAAKtJ,WAAaA,EAClBsJ,KAAKtE,YAAc,IAAIuM,EAAYvM,GAkBrC,SAAS8M,EAAGpN,GACV4E,KAAKuI,IAAMnN,EA/IbuL,EAAgBc,EAAO,SAAU,CAC/B,OACA,UACA,aACA,WAGFL,EAAoBK,EAAO,SAAUgB,SAAU,CAC7C,MACA,SACA,SACA,aACA,UAGFjB,EAA0BC,EAAO,SAAUgB,SAAU,CACnD,aACA,kBAQF9B,EAAgBD,EAAQ,UAAW,CACjC,YACA,MACA,aACA,UAGFU,EAAoBV,EAAQ,UAAWgC,UAAW,CAChD,SACA,WAIF,CAAC,UAAW,WAAY,sBAAsB3B,SAAQ,SAAS4B,GACvDA,KAAcD,UAAU5D,YAC9B4B,EAAO5B,UAAU6D,GAAc,WAC7B,IAAIhB,EAAS3H,KACTqG,EAAOiB,UACX,OAAOvT,QAAQC,UAAUwS,MAAK,WAE5B,OADAmB,EAAOC,QAAQe,GAAYpC,MAAMoB,EAAOC,QAASvB,GAC1CL,EAAiB2B,EAAOE,UAAUrB,MAAK,SAAS5K,GACrD,GAAKA,EACL,OAAO,IAAI8K,EAAO9K,EAAO+L,EAAOE,qBAUxCC,EAAYhD,UAAU8D,YAAc,WAClC,OAAO,IAAInB,EAAMzH,KAAKgI,OAAOY,YAAYrC,MAAMvG,KAAKgI,OAAQV,aAG9DQ,EAAYhD,UAAUnJ,MAAQ,WAC5B,OAAO,IAAI8L,EAAMzH,KAAKgI,OAAOrM,MAAM4K,MAAMvG,KAAKgI,OAAQV,aAGxDX,EAAgBmB,EAAa,SAAU,CACrC,OACA,UACA,aACA,kBAGFV,EAAoBU,EAAa,SAAUe,eAAgB,CACzD,MACA,MACA,SACA,QACA,MACA,SACA,SACA,aACA,UAGFrB,EAA0BM,EAAa,SAAUe,eAAgB,CAC/D,aACA,kBAGFtB,EAAaO,EAAa,SAAUe,eAAgB,CAClD,gBAkBFZ,EAAYnD,UAAUrJ,YAAc,WAClC,OAAO,IAAIqM,EAAY9H,KAAKmI,IAAI1M,YAAY8K,MAAMvG,KAAKmI,IAAKb,aAG9DX,EAAgBsB,EAAa,MAAO,CAClC,mBACA,SAGFV,EAAaU,EAAa,MAAOa,eAAgB,CAC/C,UASFR,EAAUxD,UAAUnO,kBAAoB,WACtC,OAAO,IAAImR,EAAY9H,KAAKuI,IAAI5R,kBAAkB4P,MAAMvG,KAAKuI,IAAKjB,aAGpEX,EAAgB2B,EAAW,MAAO,CAChC,OACA,UACA,qBAGFf,EAAae,EAAW,MAAOS,YAAa,CAC1C,oBACA,UAOFP,EAAG1D,UAAUpJ,YAAc,WACzB,OAAO,IAAIuM,EAAYjI,KAAKuI,IAAI7M,YAAY6K,MAAMvG,KAAKuI,IAAKjB,aAG9DX,EAAgB6B,EAAI,MAAO,CACzB,OACA,UACA,qBAGFjB,EAAaiB,EAAI,MAAOO,YAAa,CACnC,UAKF,CAAC,aAAc,iBAAiBhC,SAAQ,SAASiC,GAC/C,CAAClB,EAAaL,GAAOV,SAAQ,SAASM,GAE9B2B,KAAY3B,EAAYvC,YAE9BuC,EAAYvC,UAAUkE,EAASnY,QAAQ,OAAQ,YAAc,WAC3D,IAAIwV,EAAOV,EAAQ2B,WACfvR,EAAWsQ,EAAKA,EAAK9J,OAAS,GAC9B0M,EAAejJ,KAAKgI,QAAUhI,KAAK0H,OACnCtU,EAAU6V,EAAaD,GAAUzC,MAAM0C,EAAc5C,EAAKP,MAAM,GAAI,IACxE1S,EAAQ6S,UAAY,WAClBlQ,EAAS3C,EAAQR,iBAOzB,CAAC6U,EAAOK,GAAaf,SAAQ,SAASM,GAChCA,EAAYvC,UAAUoE,SAC1B7B,EAAYvC,UAAUoE,OAAS,SAASC,EAAOC,GAC7C,IAAIC,EAAWrJ,KACXsJ,EAAQ,GAEZ,OAAO,IAAIvV,SAAQ,SAASC,GAC1BqV,EAASE,cAAcJ,GAAO,SAASxB,GAChCA,GAIL2B,EAAME,KAAK7B,EAAO/L,YAEJlC,IAAV0P,GAAuBE,EAAM/M,QAAU6M,EAI3CzB,EAAO8B,WAHLzV,EAAQsV,IANRtV,EAAQsV,cAoClB5D,EAAQgE,OArBR,SAAgBlP,EAAMmP,EAASC,GAC7B,IAAItD,EAAIH,EAAqBlL,UAAW,OAAQ,CAACT,EAAMmP,IACnDvW,EAAUkT,EAAElT,QAUhB,OARIA,IACFA,EAAQyW,gBAAkB,SAAS/I,GAC7B8I,GACFA,EAAgB,IAAItB,EAAUlV,EAAQR,OAAQkO,EAAMpK,WAAYtD,EAAQsI,gBAKvE4K,EAAEE,MAAK,SAASpL,GACrB,OAAO,IAAIoN,EAAGpN,OASlBsK,EAAQoE,SALR,SAAkBtP,GAChB,OAAO2L,EAAqBlL,UAAW,iBAAkB,CAACT,KAM5DyM,OAAOC,eAAexB,EAAS,aAAc,CAAE9J,OAAO,IAxTSmO,CAAQrE","file":"vendors~firebase-messaging.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occured while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occured while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occured while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/app-config';\nimport { IdChangeCallbackFn } from '../functions';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb, deleteDb } from 'idb';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { WindowController } from './controllers/window-controller';\nimport { SwController } from './controllers/sw-controller';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../api/create-installation-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../api/generate-auth-token-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(dependencies.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  dependencies: FirebaseDependencies,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(dependencies.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(dependencies.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(dependencies, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  dependencies: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      dependencies,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(dependencies.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.serverCode === 401 || e.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(dependencies.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(dependencies.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<string> {\n  await completeInstallationRegistration(dependencies.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(dependencies, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport type IdChangeCallbackFn = (installationId: string) => void;\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n */\nexport function onIdChange(\n  { appConfig }: FirebaseDependencies,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  addCallback(appConfig, callback);\n\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getId(\n  dependencies: FirebaseDependencies\n): Promise<string> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    dependencies.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(dependencies).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../api/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(\n  dependencies: FirebaseDependencies\n): Promise<void> {\n  const { appConfig } = dependencies;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { openDb, deleteDb } from 'idb';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-to-base64';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher,\n * so that the upgrade callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API\n    // and does not exist in all browsers.\n    // TODO: Remove typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorCode, ERROR_FACTORY } from '../util/errors';\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { TokenDetails, SubscriptionOptions } from '../interfaces/token-details';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { AppConfig } from '../interfaces/app-config';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dbGet, dbSet, dbRemove } from '../helpers/idb-manager';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails, SubscriptionOptions } from '../interfaces/token-details';\nimport { requestUpdateToken, requestGetToken, requestDeleteToken } from './api';\nimport { arrayToBase64 } from '../helpers/array-to-base64';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription\n  // is generated and returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from\n * FCM, and unregisters the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      token: updatedToken,\n      createTime: Date.now(),\n      ...tokenDetails\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: vapidKey\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from './message-payload';\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\nexport interface InternalMessage {\n  firebaseMessaging: {\n    type: MessageType;\n    payload: MessagePayload;\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConsoleMessageData } from '../interfaces/message-payload';\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the\n  // Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getToken, deleteToken } from '../core/token-management';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { InternalMessage, MessageType } from '../interfaces/internal-message';\nimport {\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ConsoleMessageData } from '../interfaces/message-payload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { FirebaseService } from '@firebase/app-types/private';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n\n    const swRegistration = await this.getServiceWorkerRegistration();\n\n    // Check notification permission.\n    if (Notification.permission === 'default') {\n      // The user hasn't allowed or denied notifications yet. Ask them.\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    return getToken(this.firebaseDependencies, swRegistration, this.vapidKey);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    const swRegistration = await this.getServiceWorkerRegistration();\n\n    return deleteToken(this.firebaseDependencies, swRegistration);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on\n   * message.\n   * @return The unsubscribe function for the observer.\n   */\n  // TODO: Simplify this to only accept a function and not an Observer.\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  // Unimplemented\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  /**\n   * Creates or updates the default service worker registration.\n   * @return The service worker registration to be used for the push service.\n   */\n  private async getServiceWorkerRegistration(): Promise<\n    ServiceWorkerRegistration\n  > {\n    if (!this.swRegistration) {\n      try {\n        this.swRegistration = await navigator.serviceWorker.register(\n          DEFAULT_SW_PATH,\n          {\n            scope: DEFAULT_SW_SCOPE\n          }\n        );\n      } catch (e) {\n        throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n          browserErrorMessage: e.message\n        });\n      }\n    }\n\n    return this.swRegistration;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    if (!event.data?.firebaseMessaging) {\n      // Not a message from FCM\n      return;\n    }\n\n    const { type, payload } = (event.data as InternalMessage).firebaseMessaging;\n\n    if (this.onMessageCallback && type === MessageType.PUSH_RECEIVED) {\n      this.onMessageCallback(payload);\n    }\n\n    const { data } = payload;\n    if (\n      isConsoleMessage(data) &&\n      data[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      // Analytics is enabled on this message, so we should log it.\n      await this.logEvent(type, data);\n    }\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteToken, getToken } from '../core/token-management';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport {\n  MessagePayload,\n  NotificationDetails\n} from '../interfaces/message-payload';\nimport { FCM_MSG, DEFAULT_VAPID_KEY } from '../util/constants';\nimport { MessageType, InternalMessage } from '../interfaces/internal-message';\nimport { dbGet } from '../helpers/idb-manager';\nimport { Unsubscribe } from '@firebase/util';\nimport { sleep } from '../helpers/sleep';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { FirebaseService } from '@firebase/app-types/private';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private bgMessageHandler: BgMessageHandler | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * Calling setBackgroundMessageHandler will opt in to some specific\n   * behaviours.\n   * 1.) If a notification doesn't need to be shown due to a window already\n   * being visible, then push messages will be sent to the page.\n   * 2.) If a notification needs to be shown, and the message contains no\n   * notification data this method will be called\n   * and the promise it returns will be passed to event.waitUntil.\n   * If you do not set this callback then all push messages will let and the\n   * developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received\n   * and a notification must be shown. The callback will be given the data from\n   * the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  // TODO: Remove getToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token.\n      // This is needed because usePublicVapidKey was not available in SW.\n      // It will be removed when vapidKey becomes a parameter of getToken, or\n      // when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of\n   * the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The\n   * value of the `notification` property will be used as the NotificationOptions\n   * object passed to showNotification. Additionally, the `title` property of the\n   * notification object will be used as the title.\n   *\n   * If there is no notification data in the payload then no notification will be\n   * shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const payload = getMessagePayload(event);\n    if (!payload) {\n      return;\n    }\n\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      // App in foreground. Send to page.\n      return sendMessageToWindowClients(clientList, payload);\n    }\n\n    const notificationDetails = getNotificationData(payload);\n    if (notificationDetails) {\n      await showNotification(notificationDetails);\n    } else if (this.bgMessageHandler) {\n      await this.bgMessageHandler(payload);\n    }\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const payload: MessagePayload = event.notification?.data?.[FCM_MSG];\n    if (!payload) {\n      // Not an FCM notification, do nothing.\n      return;\n    } else if (event.action) {\n      // User clicked on an action button.\n      // This will allow devs to act on action button clicks by using a custom\n      // onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    const link = getLink(payload);\n    if (!link) {\n      return;\n    }\n\n    let client = await getWindowClient(link);\n    if (!client) {\n      // Unable to find window client so need to open one.\n      // This also focuses the opened client.\n      client = await self.clients.openWindow(link);\n      // Wait three seconds for the client to initialize and set up the message\n      // handler so that it can receive the message.\n      await sleep(3000);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    const message = createNewMessage(MessageType.NOTIFICATION_CLICKED, payload);\n    return client.postMessage(message);\n  }\n}\n\nfunction getMessagePayload({ data }: PushEvent): MessagePayload | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\nfunction getNotificationData(\n  payload: MessagePayload\n): NotificationDetails | undefined {\n  if (!payload || typeof payload.notification !== 'object') {\n    return;\n  }\n\n  const notificationInformation: NotificationDetails = {\n    ...payload.notification\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the\n  // notification as being an FCM notification vs a notification from\n  // somewhere else (i.e. normal web push or developer generated\n  // notification).\n  notificationInformation.data = {\n    ...payload.notification.data,\n    [FCM_MSG]: payload\n  };\n\n  return notificationInformation;\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: string): Promise<WindowClient | null> {\n  // Use URL to normalize the URL when comparing to windowClients.\n  // This at least handles whether to include trailing slashes or not\n  const parsedURL = new URL(url, self.location.href).href;\n\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const parsedClientUrl = new URL(client.url, self.location.href).href;\n    if (parsedClientUrl === parsedURL) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will\n * resolve to true, otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages\n      // of extensions, which are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\n/**\n * @param payload The data from the push event that should be sent to all\n * available pages.\n * @returns Returns a promise that resolves once the message has been sent to\n * all WindowClients.\n */\nfunction sendMessageToWindowClients(\n  clientList: WindowClient[],\n  payload: MessagePayload\n): void {\n  const message = createNewMessage(MessageType.PUSH_RECEIVED, payload);\n\n  for (const client of clientList) {\n    client.postMessage(message);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction createNewMessage(\n  type: MessageType,\n  payload: MessagePayload\n): InternalMessage {\n  return {\n    firebaseMessaging: { type, payload }\n  };\n}\n\nfunction showNotification(details: NotificationDetails): Promise<void> {\n  const title = details.title ?? '';\n\n  const { actions } = details;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(title, details);\n}\n\nfunction getLink(payload: MessagePayload): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.idb = {}));\n}(this, function (exports) { 'use strict';\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  function openDb(name, version, upgradeCallback) {\n    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n    var request = p.request;\n\n    if (request) {\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n    }\n\n    return p.then(function(db) {\n      return new DB(db);\n    });\n  }\n\n  function deleteDb(name) {\n    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n  }\n\n  exports.openDb = openDb;\n  exports.deleteDb = deleteDb;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"],"sourceRoot":""}